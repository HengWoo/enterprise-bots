# Campfire AI Bot - v1.0.8 Test with HusanAI
# Testing if full Claude CLI (via npm) works with HusanAI custom MCP
# This version has Node.js + npm + Claude CLI (slower build, but complete setup)

# Stage 1: Builder - Build Campfire AI Bot
FROM python:3.11-slim AS builder

# Install uv
RUN pip install --no-cache-dir uv

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Copy source code for dependency resolution
COPY src/ ./src/
COPY bots/ ./bots/

# Install dependencies using uv (creates .venv)
RUN uv sync --frozen

# Stage 2: Runtime
FROM python:3.11-slim

LABEL maintainer="heng.woo@gmail.com"
LABEL description="Campfire AI Bot v1.0.8 - Full Node.js + npm Claude CLI for MCP testing"

# Install uv in runtime (CRITICAL: needed for Financial MCP subprocess)
RUN pip install --no-cache-dir uv

# Install Node.js 20.x (FULL SETUP - v1.0.8 style)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && NODE_MAJOR=20 \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Install sqlite3 separately
RUN apt-get update && apt-get install -y --no-install-recommends \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

# Install Claude Code CLI via npm (v1.0.8 style - takes ~7 minutes)
RUN npm install -g @anthropic-ai/claude-code

# Create app user (security: non-root)
RUN useradd -m -u 1000 appuser

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder /app/.venv /app/.venv

# Copy application code
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser bots/ ./bots/

# Copy Financial MCP and install dependencies
COPY financial-mcp/ /app/financial-mcp/
WORKDIR /app/financial-mcp
# Remove broken .venv if it exists
RUN rm -rf .venv
# Install Financial MCP dependencies using system Python 3.11
ENV UV_PYTHON=/usr/local/bin/python3
RUN uv sync
# Go back to app directory
WORKDIR /app

# Change ownership of Financial MCP to appuser
RUN chown -R appuser:appuser /app/financial-mcp

# Create directories for AI knowledge (will be mounted as volumes)
RUN mkdir -p /app/ai-knowledge/user_contexts \
             /app/ai-knowledge/processed_files && \
    chown -R appuser:appuser /app/ai-knowledge

# Switch to app user
USER appuser

# Expose Flask port
EXPOSE 5000

# Environment variables
ENV FLASK_PORT=5000 \
    FLASK_HOST=0.0.0.0 \
    PYTHONUNBUFFERED=1 \
    PATH="/app/.venv/bin:$PATH"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Run Flask app via uv's virtual environment
CMD ["python", "src/app.py"]
