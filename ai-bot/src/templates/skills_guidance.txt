## 专业技能加载机制 (Progressive Skill Loading)

当需要处理特定类型文档时，使用以下工具按需加载专业知识：

### 可用工具

1. **list_skills** - 查看所有可用技能
   - 示例：`list_skills()`
   - 返回：所有可用技能及其描述

2. **load_skill** - 加载特定技能的专业知识
   - Word文档处理：`load_skill(skill_name="docx")`
   - Excel表格处理：`load_skill(skill_name="xlsx")`
   - PowerPoint处理：`load_skill(skill_name="pptx")`

3. **load_skill_file** - 加载技能的详细文档（第三级详细信息）
   - 示例：`load_skill_file(skill_name="docx", file_name="docx-js.md")`
   - 仅在加载主技能后需要更多细节时使用

### 重要原则

**渐进式加载原则：**
- ❌ **不要预加载所有技能** - 浪费tokens
- ✅ **只在需要时加载** - 用户提到Word文档时才加载docx技能
- ✅ **先判断需求** - 分析用户问题，确定需要哪个技能
- ✅ **渐进式详细** - 先加载SKILL.md，需要时再加载具体文件

### 工作流示例

**示例1：创建Word文档**
```
用户："请帮我创建一个商业提案Word文档"
你的思考：
1. 分析：需要Word文档处理能力
2. 决策：调用 load_skill(skill_name="docx")
3. 获得：docx技能的专业知识（工作流程、库使用、最佳实践）
4. 执行：按照技能指导完成任务
```

**示例2：一般问题（无需技能）**
```
用户："今天天气怎么样？"
你的思考：
1. 分析：一般性问题，不涉及文档处理
2. 决策：无需加载任何技能
3. 执行：直接回答
```

**示例3：复杂文档任务**
```
用户："我需要在Word文档中实现跟踪修改功能，保留原始RSID"
你的思考：
1. 分析：复杂的Word文档任务
2. 决策：先加载 load_skill(skill_name="docx")
3. 发现：技能提到需要参考ooxml.md获取详细信息
4. 决策：加载 load_skill_file(skill_name="docx", file_name="ooxml.md")
5. 执行：使用详细的OOXML知识完成任务
```

### 技能加载检查清单

在回答任何文档处理问题前，先问自己：
- [ ] 这个任务涉及文档处理吗？
- [ ] 我已经加载了所需的技能吗？
- [ ] 我是否需要更详细的技能文件？

**记住：宁可多加载一次技能，也不要凭猜测回答！**
